MeruLogo.util.extendObject = function (b, c) {
    for (var a in c) {
        b[a] = c[a]
    }
};
MeruLogo.util.distanceBetween = function (d, c) {
    var b = d.x - c.x;
    var a = d.y - c.y;
    return Math.sqrt(b * b + a * a)
};
MeruLogo.util.randomBetween = function (c, b, a) {
    var d = c + (Math.random() * (b - c));
    if (absMin !== undefined && c < -absMin && b > absMin) {
        if (Math.random() > 0.5) {
            d = absMin + (Math.random() * (b - absMin))
        } else {
            d = -absMin + (Math.random() * (c + absMin))
        }
    }
    return d
};
MeruLogo.util.getLoopedArrayElement = function (c, b) {
    if (c[b]) {
        return c[b]
    }
    var a = c.length;
    if (b > a - 1) {
        return c[b - a]
    }
    if (b < 0) {
        return c[a + b]
    }
};
MeruLogo.util.Color = function (f, e, c, d) {
    this.r = f || 0;
    this.g = e || 0;
    this.b = c || 0;
    this.a = d || 1
};
MeruLogo.util.Color.prototype.approach = function (b, a) {
    this.r += (b.r - this.r) * a;
    this.g += (b.g - this.g) * a;
    this.b += (b.b - this.b) * a;
    this.a += (b.a - this.a) * a
};
MeruLogo.util.Color.prototype.isWithinRangeOf = function (a, b) {
    if (Math.abs(this.r - b.r) < a || Math.abs(this.g - b.g) < a || Math.abs(this.b - b.b) < a) {
        return true
    }
    return false
};
MeruLogo.util.Color.prototype.clone = function () {
    return new MeruLogo.util.Color(this.r, this.g, this.b, this.a)
};
MeruLogo.util.Color.prototype.toHEX = function () {
    return (this.r << 16 | this.g << 8 | this.b)
        .toString(16)
};
MeruLogo.util.Color.prototype.toRGBAString = function () {
    return "rgba(" + Math.round(this.r) + "," + Math.round(this.g) + "," + Math.round(this.b) + "," + this.a + ")"
};
MeruLogo.util.Point = function (a, b) {
    this.x = a || 0;
    this.y = b || 0
};
MeruLogo.util.Point.prototype.distanceTo = function (c) {
    var b = c.x - this.x;
    var a = c.y - this.y;
    return Math.sqrt(b * b + a * a)
};
MeruLogo.util.Point.prototype.clonePosition = function () {
    return {
        x: this.x,
        y: this.y
    }
};
MeruLogo.util.Region = function () {
    this.left = Number.POSITIVE_INFINITY;
    this.top = Number.POSITIVE_INFINITY;
    this.right = 0;
    this.bottom = 0
};
MeruLogo.util.Region.prototype.reset = function () {
    this.left = Number.POSITIVE_INFINITY;
    this.top = Number.POSITIVE_INFINITY;
    this.right = 0;
    this.bottom = 0
};
MeruLogo.util.Region.prototype.inflate = function (a, b) {
    this.left = Math.min(this.left, a);
    this.top = Math.min(this.top, b);
    this.right = Math.max(this.right, a);
    this.bottom = Math.max(this.bottom, b)
};
MeruLogo.util.Region.prototype.contains = function (a, b) {
    return a > this.left && a < this.right && b > this.top && b < this.bottom
};
if (!Array.prototype.map) {
    Array.prototype.map = function (b) {
        var a = this.length >>> 0;
        if (typeof b != "function") {
            throw new TypeError()
        }
        var e = new Array(a);
        var d = arguments[1];
        for (var c = 0; c < a; c++) {
            if (c in this) {
                e[c] = b.call(d, this[c], c, this)
            }
        }
        return e
    }
};